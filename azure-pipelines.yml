trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: buildConfiguration
  value: 'Release'

stages:
- stage: TestClient
  jobs:
  - job: TestJob
    steps: 
      # Setup Node.js for React app build
      - task: NodeTool@0
        inputs:
          versionSpec: '20.x' 
        displayName: 'Install Node.js'

      # Install npm dependencies for testing
      - script: |
          cd Fitlance/ClientApp
          npm install
        displayName: 'Install dependencies for testing'

      # Run React app tests
      - script: |
          cd Fitlance/ClientApp
          npm run jest
        displayName: 'Test React app'

      # Clean up node_modules after testing
      - script: |
          cd Fitlance/ClientApp
          rm -rf node_modules
        displayName: 'Clean up node_modules'

- stage: BuildAppAndTestDOTNET
  jobs:
  - job: BuildJob
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 8 SDK'
        inputs:
          version: '8.x'
          packageType: 'sdk'

      # Build .NET Core app
      - script: dotnet build --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'

      # Add testing steps for the .NET Core app
      - script: dotnet test --configuration $(buildConfiguration) --no-build
        displayName: 'Test .NET Core App'

        # Download secure file 
      - task: DownloadSecureFile@1
        name: envFile
        inputs:
          secureFile: '.env.production.logins'
      - script: |
          cp $(envFile.secureFilePath) Fitlance/ClientApp/.env.production
        displayName: 'Copy secure file to React app directory'

      # Install npm dependencies and build React app
      - script: |
          cd Fitlance/ClientApp
          npm install --production
          npm run build
        displayName: 'Build React app'
        env:
          NODE_ENV: production

      # Publish Artifacts
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'
          zipAfterPublish: true
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
          ArtifactName: 'publish'
          publishLocation: 'Container'
          
- stage: Deploy
  jobs:
  - deployment: DeployToAzure
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(AZSUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az --version
                az webapp config set --resource-group "Fitlance" --name "Fitlance" --net-framework-version v8.0
            displayName: 'Set .NET 8 as the runtime stack on Azure App Service'
            
          # Deploy to Azure App Service
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(AZSUBSCRIPTION)'
              appType: 'webAppLinux'
              appName: '$(Fitlance)'
              package: '$(Build.ArtifactStagingDirectory)/publish'
